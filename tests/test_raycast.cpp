//
// Created by Andrew Astakhov on 19.01.25.
//
#include "bvh/vec.h"
#include "./bvh/raycast.h"
#include "bvh/prims.h"
using namespace bvh;
static std::vector<Tri<vec<double,3>>> tris={{{-30.171049118041992, -10.821517944335938, 33.35442352294922}, {-30.171049118041992, -10.821517944335938, -26.354421615600586}, {-16.104957580566406, -5.603452205657959, 25.218852996826172}}, {{-30.171049118041992, -10.821517944335938, -26.354421615600586}, {31.828950881958008, 12.178482055664062, -26.354421615600586}, {-16.104957580566406, -5.603452205657959, -18.218852996826172}}, {{31.828950881958008, 12.178482055664062, 33.35442352294922}, {-30.171049118041992, -10.821517944335938, 33.35442352294922}, {-16.104957580566406, -5.603452205657959, 25.218852996826172}}, {{31.828950881958008, 12.178482055664062, -26.354421615600586}, {31.828950881958008, 12.178482055664062, 33.35442352294922}, {28.0614070892334, 10.780844688415527, 25.218852996826172}}, {{31.828950881958008, 12.178482055664062, 33.35442352294922}, {31.828950881958008, 12.178482055664062, -26.354421615600586}, {24.171049118041992, 32.82151794433594, -26.354421615600586}}, {{24.171049118041992, 32.82151794433594, 33.35442352294922}, {24.171049118041992, 32.82151794433594, -26.354421615600586}, {20.403507232666016, 31.42388153076172, 25.218852996826172}}, {{-23.762859344482422, 15.03958511352539, -18.218852996826172}, {20.403507232666016, 31.42388153076172, -18.218852996826172}, {24.171049118041992, 32.82151794433594, -26.354421615600586}}, {{20.403507232666016, 31.42388153076172, 25.218852996826172}, {-23.762859344482422, 15.03958511352539, 25.218852996826172}, {24.171049118041992, 32.82151794433594, 33.35442352294922}}, {{-37.828948974609375, 9.821517944335938, -26.354421615600586}, {-37.828948974609375, 9.821517944335938, 33.35442352294922}, {-23.762859344482422, 15.03958511352539, 25.218852996826172}}, {{-37.828948974609375, 9.821517944335938, 33.35442352294922}, {-37.828948974609375, 9.821517944335938, -26.354421615600586}, {-30.171049118041992, -10.821517944335938, -26.354421615600586}}, {{-37.828948974609375, 9.821517944335938, -26.354421615600586}, {24.171049118041992, 32.82151794433594, -26.354421615600586}, {-30.171049118041992, -10.821517944335938, -26.354421615600586}}, {{-37.828948974609375, 9.821517944335938, 33.35442352294922}, {-30.171049118041992, -10.821517944335938, 33.35442352294922}, {24.171049118041992, 32.82151794433594, 33.35442352294922}}, {{-16.104957580566406, -5.603452205657959, -18.218852996826172}, {28.0614070892334, 10.780844688415527, -18.218852996826172}, {20.403507232666016, 31.42388153076172, -18.218852996826172}}, {{-16.104957580566406, -5.603452205657959, 25.218852996826172}, {-16.104957580566406, -5.603452205657959, -18.218852996826172}, {-23.762859344482422, 15.03958511352539, -18.218852996826172}}, {{28.0614070892334, 10.780844688415527, 25.218852996826172}, {-16.104957580566406, -5.603452205657959, 25.218852996826172}, {20.403507232666016, 31.42388153076172, 25.218852996826172}}, {{28.0614070892334, 10.780844688415527, -18.218852996826172}, {28.0614070892334, 10.780844688415527, 25.218852996826172}, {20.403507232666016, 31.42388153076172, 25.218852996826172}}, {{-30.171049118041992, -10.821517944335938, -26.354421615600586}, {-16.104957580566406, -5.603452205657959, -18.218852996826172}, {-16.104957580566406, -5.603452205657959, 25.218852996826172}}, {{31.828950881958008, 12.178482055664062, -26.354421615600586}, {28.0614070892334, 10.780844688415527, -18.218852996826172}, {-16.104957580566406, -5.603452205657959, -18.218852996826172}}, {{31.828950881958008, 12.178482055664062, 33.35442352294922}, {-16.104957580566406, -5.603452205657959, 25.218852996826172}, {28.0614070892334, 10.780844688415527, 25.218852996826172}}, {{31.828950881958008, 12.178482055664062, -26.354421615600586}, {28.0614070892334, 10.780844688415527, 25.218852996826172}, {28.0614070892334, 10.780844688415527, -18.218852996826172}}, {{31.828950881958008, 12.178482055664062, 33.35442352294922}, {24.171049118041992, 32.82151794433594, -26.354421615600586}, {24.171049118041992, 32.82151794433594, 33.35442352294922}}, {{24.171049118041992, 32.82151794433594, -26.354421615600586}, {20.403507232666016, 31.42388153076172, -18.218852996826172}, {20.403507232666016, 31.42388153076172, 25.218852996826172}}, {{-23.762859344482422, 15.03958511352539, -18.218852996826172}, {24.171049118041992, 32.82151794433594, -26.354421615600586}, {-37.828948974609375, 9.821517944335938, -26.354421615600586}}, {{-23.762859344482422, 15.03958511352539, 25.218852996826172}, {-37.828948974609375, 9.821517944335938, 33.35442352294922}, {24.171049118041992, 32.82151794433594, 33.35442352294922}}, {{-37.828948974609375, 9.821517944335938, -26.354421615600586}, {-23.762859344482422, 15.03958511352539, 25.218852996826172}, {-23.762859344482422, 15.03958511352539, -18.218852996826172}}, {{-37.828948974609375, 9.821517944335938, 33.35442352294922}, {-30.171049118041992, -10.821517944335938, -26.354421615600586}, {-30.171049118041992, -10.821517944335938, 33.35442352294922}}, {{24.171049118041992, 32.82151794433594, -26.354421615600586}, {31.828950881958008, 12.178482055664062, -26.354421615600586}, {-30.171049118041992, -10.821517944335938, -26.354421615600586}}, {{-30.171049118041992, -10.821517944335938, 33.35442352294922}, {31.828950881958008, 12.178482055664062, 33.35442352294922}, {24.171049118041992, 32.82151794433594, 33.35442352294922}}, {{-16.104957580566406, -5.603452205657959, -18.218852996826172}, {20.403507232666016, 31.42388153076172, -18.218852996826172}, {-23.762859344482422, 15.03958511352539, -18.218852996826172}}, {{-16.104957580566406, -5.603452205657959, 25.218852996826172}, {-23.762859344482422, 15.03958511352539, -18.218852996826172}, {-23.762859344482422, 15.03958511352539, 25.218852996826172}}, {{-16.104957580566406, -5.603452205657959, 25.218852996826172}, {-23.762859344482422, 15.03958511352539, 25.218852996826172}, {20.403507232666016, 31.42388153076172, 25.218852996826172}}, {{28.0614070892334, 10.780844688415527, -18.218852996826172}, {20.403507232666016, 31.42388153076172, 25.218852996826172}, {20.403507232666016, 31.42388153076172, -18.218852996826172}}};


static vec3 orig={-136.963772, 67.245927, 70.986495};
static vec3 gridOrigin={-10.56901, -56.66736, -57.708301};

inline void generateRayGrid(const vec3 &origin,const vec3 &g_origin,std::vector<Ray<vec3>> &grid, const double u=7.0, const double v=7.0, const int u_count=20, const int v_count=20){
  grid.resize(u_count*v_count);
  for(int i=0; i<u_count; i++){
    for(int j=0; j<v_count; j++){
      grid[i*v_count+j] = {origin, g_origin+vec3(u*i, v*j, 0)-origin};
    }
  }
}


inline void test_raycast1( const std::vector<Ray<vec3>> &grid, const BVH tree,const std::vector<Tri<vec3>> &tris, std::vector<vec3> &hits, std::vector<bool> &mask) {

  hits.resize(grid.size());
  mask.resize(grid.size());
  for (int i = 0; i < grid.size(); ++i) {
    std::vector<vec3> hits_local ;
    auto& ray=grid[i];
    auto end=ray.start+ray.direction;
    raycast(ray,tree, tris,hits_local);
    if (hits_local.size() > 0) {
      hits[i]=hits_local[0];

      mask[i]=true;
    } else {
      hits[i]=end;
      mask[i]=false;
    }


  }

}


inline void test_raycast2( const std::vector<Ray<vec3>> &grid, const BVH tree,const std::vector<Tri<vec3>> &tris, std::vector<vec3> &hits, std::vector<size_t> &counts) {

  raycast(grid,tree,tris,hits,counts);



}




int main(int argc, char *argv[]) {
  BVH tree;
  std::vector<AABB<double,3>> aabbs(tris.size());
  for (int i = 0; i < tris.size(); ++i) {
    auto& bb=aabbs[i];
    auto& tr = tris[i];
    bb.expand(tr.a);
    bb.expand(tr.b);
    bb.expand(tr.c);


  }
  tree.build(aabbs);


  std::vector<Ray<vec3>> grid;
  generateRayGrid(orig,gridOrigin,grid);
  std::vector<vec3> hits;
  std::vector<bool> mask;
  const auto start1 = std::chrono::high_resolution_clock::now();

  test_raycast1(grid,tree,tris,hits,mask);
  const auto end1 = std::chrono::high_resolution_clock::now();
  const auto delta1= std::chrono::duration_cast<std::chrono::nanoseconds>(end1-start1).count();


  std::cout << "[";
  for (int i = 0; i < hits.size(); ++i) {
    auto& hit=hits[i];
    std::cout << hit << ", ";

  }
  std::cout << "]"<<std::endl;
  std::cout << "[";
  for (int i = 0; i < hits.size(); ++i) {

    std::cout << (int)mask[i] << ", ";

  }
  std::cout << "]"<<std::endl;

  std::cout <<std::endl;

  std::vector<vec3> hits2;
  std::vector<size_t> counts;
  const auto start2 = std::chrono::high_resolution_clock::now();

  test_raycast2(grid,tree,tris,hits2,counts);
  const auto end2 = std::chrono::high_resolution_clock::now();
  const auto delta2= std::chrono::duration_cast<std::chrono::nanoseconds>(end2-start2).count();
  std::cout << "[";
  for (int i = 0; i < hits2.size(); ++i) {
    auto& hit=hits2[i];
    std::cout << hit << ", ";

  }
  std::cout << "]"<<std::endl;
  std::cout << "[";
  for (int i = 0; i < counts.size(); ++i) {

    std::cout << counts[i] << ", ";

  }
  std::cout << "]"<<std::endl;

  std::cout <<std::endl;






  std::cout << "raycast1 took " << delta1*1e-6 << " ms" << std::endl;

  std::cout << "raycast2 took " << delta2*1e-6 << " ms" << std::endl;

}
