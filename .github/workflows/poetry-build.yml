name: poetry-build

on:

  push:
    branches:
      - "master"


jobs:
  build:
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
        exclude:
          - os: windows-latest
            python-version: "3.13"

    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}


    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # ------------------------------------------------------
      # MacOS: Install LLVM + set environment to use it
      # ------------------------------------------------------
      - name: Install LLVM on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install llvm
          brew install libomp
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          echo "CFLAGS=-fopenmp" >> $GITHUB_ENV
          echo "CXXFLAGS=-fopenmp" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix llvm)/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix llvm)/lib -Wl,-rpath,$(brew --prefix llvm)/lib" >> $GITHUB_ENV

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ steps.extract_branch.outputs.branch }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Poetry build
        run: |
          source $VENV
          poetry build

      - name: Artifact name
        id: artifactname
        run: |
          cd dist
          echo "wheelfile=$(ls *.whl | head -1)" >> $GITHUB_OUTPUT

      - name: Debug artifact name
        run: |
          echo "New artifact name: ${{  steps.artifactname.outputs.wheelfile_name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          path: dist
          name: ${{  steps.artifactname.outputs.wheelfile_name }}
          overwrite: true
